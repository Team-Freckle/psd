Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import psd.BinaryReader;\r\nimport psd.manipulator.PsdEditor;\r\nimport psd.manipulator.PsdReader;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.io.*;\r\n\r\npublic class Main {\r\n    public static void main(String[]args) throws IOException {\r\n        System.out.println(\"registering..\");\r\n        PsdEditor psdManipulator = new PsdEditor();\r\n        BinaryReader binaryReader = new BinaryReader();\r\n\r\n        System.out.println(\"importing..\");\r\n        FileInputStream fis = new FileInputStream(\"C:/Users/cksgu/Desktop/alt.psd\");\r\n        BufferedInputStream bis = new BufferedInputStream(fis);\r\n\r\n        System.out.println(\"binary running..\");\r\n        binaryReader.setInput(bis);\r\n        System.out.println(binaryReader.getBinary(90, 300));\r\n        bis = new BufferedInputStream(new FileInputStream(\"C:/Users/cksgu/Desktop/alt.psd\"));\r\n\r\n        System.out.println(\"psd running..\");\r\n        psdManipulator.open(bis);\r\n        psdManipulator.run();\r\n\r\n        System.out.println(\"creating..\");\r\n\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        ImageIO.write(psdManipulator.getPreview(), \"png\", baos);\r\n\r\n        System.out.println(psdManipulator.getDataInfo().toString());\r\n        System.out.println();\r\n\r\n        psdManipulator.addLayer(psdManipulator.getPsdLayers()[0]);\r\n\r\n        try {\r\n            // PNG 파일로 저장하고 싶은 경우\r\n            FileOutputStream fos = new FileOutputStream(\"C:/Users/cksgu/Desktop/output.png\");\r\n            fos.write(baos.toByteArray());\r\n            fos.close();\r\n\r\n            // 여기서 PNG 파일이 생성됩니다.\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision ab5a7416aa1d58207af9f17fea180caca712cc41)
+++ b/src/main/java/Main.java	(date 1695347246729)
@@ -1,5 +1,4 @@
 import psd.BinaryReader;
-import psd.manipulator.PsdEditor;
 import psd.manipulator.PsdReader;
 
 import javax.imageio.ImageIO;
@@ -8,32 +7,29 @@
 public class Main {
     public static void main(String[]args) throws IOException {
         System.out.println("registering..");
-        PsdEditor psdManipulator = new PsdEditor();
+        PsdReader psdManipulator = new PsdReader();
         BinaryReader binaryReader = new BinaryReader();
 
         System.out.println("importing..");
-        FileInputStream fis = new FileInputStream("C:/Users/cksgu/Desktop/alt.psd");
+        FileInputStream fis = new FileInputStream("C:/Users/cksgu/Desktop/test.psd");
         BufferedInputStream bis = new BufferedInputStream(fis);
 
         System.out.println("binary running..");
         binaryReader.setInput(bis);
-        System.out.println(binaryReader.getBinary(90, 300));
-        bis = new BufferedInputStream(new FileInputStream("C:/Users/cksgu/Desktop/alt.psd"));
+        System.out.println(binaryReader.getBinary(0, 10));
+        bis = new BufferedInputStream(new FileInputStream("C:/Users/cksgu/Desktop/test.psd"));
 
         System.out.println("psd running..");
         psdManipulator.open(bis);
         psdManipulator.run();
 
+        System.out.println(psdManipulator.toString());
+
         System.out.println("creating..");
 
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         ImageIO.write(psdManipulator.getPreview(), "png", baos);
 
-        System.out.println(psdManipulator.getDataInfo().toString());
-        System.out.println();
-
-        psdManipulator.addLayer(psdManipulator.getPsdLayers()[0]);
-
         try {
             // PNG 파일로 저장하고 싶은 경우
             FileOutputStream fos = new FileOutputStream("C:/Users/cksgu/Desktop/output.png");
Index: src/main/java/psd/manipulator/PsdReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package psd.manipulator;\r\n\r\nimport lombok.Data;\r\nimport psd.PsdEntity;\r\nimport psd.component.PsdHeader;\r\nimport psd.component.PsdLayer;\r\nimport psd.component.PsdSectionDataInfo;\r\n\r\nimport java.awt.image.BufferedImage;\r\nimport java.awt.image.DataBufferInt;\r\nimport java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.ArrayList;\r\n\r\n@Data\r\npublic class PsdReader extends PsdEntity {\r\n    protected BufferedInputStream input;\r\n    protected int inputLen;\r\n    protected int layerCount;\r\n    protected short[] lineLen;\r\n    protected int iLine;\r\n    protected String encoding;\r\n    protected int layerMaskInfoLen;\r\n    protected PsdSectionDataInfo dataInfo;\r\n\r\n    public PsdReader() {\r\n        psdHeader = new PsdHeader();\r\n        psdLayers = null;\r\n        dataInfo = new PsdSectionDataInfo();\r\n    }\r\n\r\n    /**\r\n     * stream(psd) 열기\r\n     * @param stream\r\n     */\r\n    public void open(InputStream stream) throws IOException {\r\n        setInput(stream);\r\n    }\r\n    public void run() throws IOException {\r\n        try {\r\n            readHeader();\r\n            readLayers();\r\n            if (layerCount == 0) {\r\n                makeDummyLayer();\r\n            }\r\n            readLayersImage();\r\n            readPreview();\r\n        }\r\n        catch (Exception e) {\r\n            throw e;\r\n            //throw new PsdException(e, getStreamOffset());\r\n        }\r\n    }\r\n    protected void sliceSection() {\r\n\r\n    }\r\n\r\n    public void readHeader() throws IOException {\r\n        if (! readString(4).equals(\"8BPS\")) {\r\n            throw new RuntimeException(\"Signature not match\");\r\n        }\r\n\r\n        psdHeader.setVersion(readShort());\r\n        jumpBytes(6);\r\n        psdHeader.setChannelCount(readShort());\r\n        psdHeader.setHeight(readInt());\r\n        psdHeader.setWidth(readInt());\r\n        psdHeader.setChannelBitsDepth(readShort());\r\n        psdHeader.setColorMode(getColorMode(readShort()));\r\n        dataInfo.setP_colorMod(getStreamOffset());\r\n        dataInfo.setL_colorMod(readInt());\r\n        jumpBytes(dataInfo.getL_colorMod());\r\n        dataInfo.setP_imageResource(getStreamOffset());\r\n        dataInfo.setL_imageResource(readInt());\r\n        jumpBytes(dataInfo.getL_imageResource());\r\n    }\r\n\r\n    public void readLayers() throws IOException {\r\n        dataInfo.setP_layerMaskInfo(getStreamOffset());\r\n        dataInfo.setL_layerMaskInfo(readInt());\r\n        layerMaskInfoLen = getStreamOffset() + dataInfo.getL_layerMaskInfo();\r\n        if(dataInfo.getL_layerMaskInfo() < 0) return;\r\n        dataInfo.setL_layerInfo(readInt());\r\n        layerCount = readShort();\r\n        int[] L_layerRecord = new int[layerCount];\r\n        int[] P_layerRecord = new int[layerCount];\r\n\r\n        if(layerCount > 0) {\r\n            psdLayers = new PsdLayer[layerCount];\r\n        }\r\n        for(int iLayerCount = 0; iLayerCount < layerCount; iLayerCount++) {\r\n            P_layerRecord[iLayerCount] = getStreamOffset();\r\n            PsdLayer layer = new PsdLayer();\r\n            layer.setTop(readInt());\r\n            layer.setLeft(readInt());\r\n            layer.setBottom(readInt());\r\n            layer.setRight(readInt());\r\n            layer.setHeight(layer.getBottom() - layer.getTop());\r\n            layer.setWidth(layer.getRight() - layer.getLeft());\r\n            layer.setChannelCount(readShort());\r\n            int[] channelId = new int[layer.getChannelCount()];\r\n            int[] channelSize = new int[layer.getChannelCount()];\r\n            for(int iLayerChannel = 0; iLayerChannel < layer.getChannelCount(); iLayerChannel++) {\r\n                channelId[iLayerChannel] = readShort();\r\n                channelSize[iLayerChannel] = readInt();\r\n            }\r\n            layer.setChannelId(channelId);\r\n            layer.setChannelSize(channelSize);\r\n            if (!readString(4).equals(\"8BIM\")) {\r\n                throw new RuntimeException(\"sign not match\");\r\n            }\r\n            layer.setModeKey(readString(4));\r\n            layer.setTransparency(readByte());\r\n            layer.setClipping(readByte() > 0 ? 'Y' : 'N');\r\n            int flag = readByte();\r\n            if (flag != 0) {\r\n                layer.setProtectTransparency((flag & 0x01) == 1 ? 'Y' : 'N');\r\n                layer.setVision((flag & 0x02) >> 1 == 1 ? 'Y' : 'N');\r\n            }\r\n            jumpBytes(1);\r\n            int dataFieldLen = readInt() + getStreamOffset();\r\n            int layerMaskAdjustmentLen = readInt();\r\n            jumpBytes(layerMaskAdjustmentLen);\r\n            int layerBlendingRangesLen = readInt();\r\n            jumpBytes(layerBlendingRangesLen);\r\n            int nameLen = readByte();\r\n            if((nameLen + 1) % 4 > 0) nameLen += 4 - (nameLen + 1) % 4;\r\n            jumpBytes(nameLen);\r\n\r\n            while (getStreamOffset() < dataFieldLen) {\r\n                String sign = readString(4);\r\n                if(! (sign.equals(\"8BIM\") || sign.equals(\"8B64\"))) {\r\n                    throw new RuntimeException(\"sign not match : \" + getStreamOffset());\r\n                }\r\n                layer = readMoreLayerInfo(layer, readString(4), readInt());\r\n            }\r\n\r\n            L_layerRecord[iLayerCount] = getStreamOffset() - P_layerRecord[iLayerCount];\r\n            psdLayers[iLayerCount] = layer;\r\n        }\r\n        dataInfo.setP_layerRecord(P_layerRecord);\r\n        dataInfo.setL_layerRecord(L_layerRecord);\r\n    }\r\n\r\n    protected PsdLayer readMoreLayerInfo(PsdLayer layer, String key, int len) {\r\n        switch (key) {\r\n            case \"luni\":\r\n                layer.setName(readUtf16(len).substring(2));\r\n                break;\r\n            default:\r\n                jumpBytes(len);\r\n        }\r\n        return layer;\r\n    }\r\n    protected void makeDummyLayer() throws IOException {\r\n        // creat dummy layer for non-layered image\r\n        encoding = readShort() == 1 ? \"rle\" : \"raw\";\r\n        layerCount = 1;\r\n        psdLayers = new PsdLayer[1];\r\n        PsdLayer layer = new PsdLayer();\r\n        psdLayers[0] = layer;\r\n        layer.setLeft(0);\r\n        layer.setRight(psdHeader.getHeight());\r\n        layer.setTop(0);\r\n        layer.setBottom(psdHeader.getWidth());\r\n        int nc = Math.min(psdHeader.getChannelCount(), 4);\r\n        if (encoding.equals(\"rle\")) {\r\n            // get list of rle encoded line lengths for all channels\r\n            readLineLen(layer.getTop() * nc);\r\n        }\r\n        layer.setChannelCount(nc);\r\n        layer.setChannelId(new int[nc]);\r\n        int[] channelID = layer.getChannelId();\r\n        for (int i = 0; i < nc; i++) {\r\n            int id = i;\r\n            if (i == 3)\r\n                id = -1;\r\n            channelID[i] = id;\r\n        }\r\n        layer.setChannelId(channelID);\r\n    }\r\n    public void readLayersImage() throws IOException {\r\n        dataInfo.setP_channelImageData(getStreamOffset());\r\n        for(int iLayerCount = 0; iLayerCount < layerCount; iLayerCount++) {\r\n            PsdLayer layer = psdLayers[iLayerCount];\r\n            byte[] r = null, g = null, b = null, a = null;\r\n            for(int iChannelCount = 0; iChannelCount < layer.getChannelCount(); iChannelCount++) {\r\n                int id = layer.getChannelId()[iChannelCount];\r\n                switch (id) {\r\n                    case 0 -> r = readChannelImage(layer.getWidth(), layer.getHeight());\r\n                    case 1 -> g = readChannelImage(layer.getWidth(), layer.getHeight());\r\n                    case 2 -> b = readChannelImage(layer.getWidth(), layer.getHeight());\r\n                    case -1 -> a = readChannelImage(layer.getWidth(), layer.getHeight());\r\n                    default -> readChannelImage(layer.getWidth(), layer.getHeight());\r\n                }\r\n            }\r\n            int n = layer.getWidth() * layer.getHeight();\r\n            if (r == null)\r\n                r = generateByteArray(n, 0);\r\n            if (g == null)\r\n                g = generateByteArray(n, 0);\r\n            if (b == null)\r\n                b = generateByteArray(n, 0);\r\n            if (a == null)\r\n                a = generateByteArray(n, 255);\r\n\r\n            BufferedImage image = makeRGBImage(layer.getWidth()\r\n                    , layer.getHeight()\r\n                    , r, g, b, a);\r\n            psdLayers[iLayerCount].setFrame(image);\r\n        }\r\n        jumpBytes(layerMaskInfoLen - getStreamOffset());\r\n    }\r\n\r\n    protected void readPreview() throws IOException {\r\n        dataInfo.setP_preview(getStreamOffset());\r\n        short encoding = readShort();\r\n        if(encoding == 0) this.encoding = \"raw\";\r\n        else if(encoding == 1) this.encoding = \"rle\";\r\n        else if(encoding == 2) this.encoding = \"zip\";\r\n        else if(encoding == 3) this.encoding = \"pzip\";\r\n\r\n        byte[] r = null, g = null, b = null, a = null;\r\n\r\n        short[][] channelL = new short[psdHeader.getChannelCount()][];\r\n        for(int iChannelCount = 0; iChannelCount < psdHeader.getChannelCount(); iChannelCount++) {\r\n            readLineLen(psdHeader.getHeight());\r\n            channelL[iChannelCount] = lineLen;\r\n        }\r\n        for(int iChannelCount = 0; iChannelCount < psdHeader.getChannelCount(); iChannelCount++) {\r\n            lineLen = channelL[iChannelCount];\r\n            iLine = 0;\r\n\r\n            switch (iChannelCount) {\r\n                case 0 -> r = readLayerCompressedChannelImage(psdHeader.getWidth(), psdHeader.getHeight());\r\n                case 1 -> g = readLayerCompressedChannelImage(psdHeader.getWidth(), psdHeader.getHeight());\r\n                case 2 -> b = readLayerCompressedChannelImage(psdHeader.getWidth(), psdHeader.getHeight());\r\n                case 3 -> a = readLayerCompressedChannelImage(psdHeader.getWidth(), psdHeader.getHeight());\r\n                default -> readLayerCompressedChannelImage(psdHeader.getWidth(), psdHeader.getHeight());\r\n            }\r\n        }\r\n        int n = psdHeader.getWidth() * psdHeader.getHeight();\r\n        if (r == null)\r\n            r = generateByteArray(n, 0);\r\n        if (g == null)\r\n            g = generateByteArray(n, 0);\r\n        if (b == null)\r\n            b = generateByteArray(n, 0);\r\n        if (a == null)\r\n            a = generateByteArray(n, 255);\r\n        preview = makeRGBImage(psdHeader.getWidth(), psdHeader.getHeight(), r, g, b, a);\r\n    }\r\n\r\n    protected byte[] readChannelImage(int width, int height) throws IOException {\r\n        byte[] b = null;\r\n        int size = width * height;\r\n        short encoding = readShort();\r\n        if(encoding == 0) this.encoding = \"raw\";\r\n        else if(encoding == 1) this.encoding = \"rle\";\r\n        else if(encoding == 2) this.encoding = \"zip\";\r\n        else if(encoding == 3) this.encoding = \"pzip\";\r\n\r\n        boolean isRLE = this.encoding.equals(\"rle\");\r\n        if (isRLE) {\r\n            readLineLen(height);\r\n        }\r\n        if (isRLE) {\r\n            b = readLayerCompressedChannelImage(width, height);\r\n        } else if(this.encoding.equals(\"raw\")) {\r\n            b = new byte[size];\r\n            readBytes(b, size);\r\n        }\r\n        return b;\r\n    }\r\n\r\n    protected byte[] readLayerCompressedChannelImage(int width, int height) throws IOException {\r\n        byte[] b = new byte[width * height];\r\n        byte[] s = new byte[width * 2];\r\n        int pos = 0;\r\n        for (int i = 0; i < height; i++) {\r\n            if (iLine >= lineLen.length) {\r\n                throw new RuntimeException(\"format err\");\r\n            }\r\n            int len = lineLen[iLine++];\r\n            readBytes(s, len);\r\n            decodeRLE(s, 0, len, b, pos);\r\n            pos += width;\r\n        }\r\n        return b;\r\n    }\r\n\r\n    protected void decodeRLE(byte[] encoding, int encodingIndex, int srcLen, byte[] raw, int rawIndex) {\r\n        try {\r\n            int max = encodingIndex + srcLen;\r\n            while (encodingIndex < max) {\r\n                byte b = encoding[encodingIndex++];\r\n                int n = b;\r\n                if (n < 0) {\r\n                    n = 1 - n;\r\n                    b = encoding[encodingIndex++];\r\n                    for (int i = 0; i < n; i++) {\r\n                        raw[rawIndex++] = b;\r\n                    }\r\n                } else {\r\n                    n = n + 1;\r\n                    System.arraycopy(encoding, encodingIndex, raw, rawIndex, n);\r\n                    rawIndex += n;\r\n                    encodingIndex += n;\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n\r\n    protected void readLineLen(int lineCount) throws IOException {\r\n        lineLen = new short[lineCount];\r\n        for(int i = 0; i < lineCount; i++) {\r\n            lineLen[i] = readShort();\r\n        }\r\n        iLine = 0;\r\n    }\r\n\r\n    protected BufferedImage makeRGBImage(int width, int height, byte[] r, byte[] g, byte[] b, byte[] a) {\r\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\r\n        int[] data = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();\r\n        int n = width * height;\r\n        int j = 0;\r\n        while (j < n) {\r\n            try {\r\n                int ac = a[j] & 0xff;\r\n                int rc = r[j] & 0xff;\r\n                int gc = g[j] & 0xff;\r\n                int bc = b[j] & 0xff;\r\n                data[j] = (((((ac << 8) | rc) << 8) | gc) << 8) | bc;\r\n            } catch (Exception e) {\r\n            }\r\n            j++;\r\n        }\r\n        return image;\r\n    }\r\n\r\n    protected byte[] generateByteArray(int size, int value) {\r\n        byte[] b = new byte[size];\r\n        if (value != 0) {\r\n            byte v = (byte) value;\r\n            for (int i = 0; i < size; i++) {\r\n                b[i] = v;\r\n            }\r\n        }\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * stream(psd) 넣기\r\n     * @param stream\r\n     */\r\n    protected void setInput(InputStream stream) throws IOException {\r\n        if (stream instanceof BufferedInputStream) input = (BufferedInputStream) stream;\r\n        else input = new BufferedInputStream(stream);\r\n        inputLen = input.available();\r\n    }\r\n\r\n    /**\r\n     * 1Byte 읽기\r\n     * @return\r\n     */\r\n    protected int readByte() {\r\n        int rByte = 0;\r\n        try {\r\n            rByte = input.read();\r\n        } catch (IOException e) {\r\n\r\n        }\r\n        return rByte;\r\n    }\r\n    /**\r\n     * XByte 읽기\r\n     * @return\r\n     */\r\n    protected int readBytes(byte[] bytes, int n) throws IOException {\r\n        if (bytes == null)\r\n            return 0;\r\n        int r = 0;\r\n        try {\r\n            r = input.read(bytes, 0, n);\r\n        } catch (IOException e) {\r\n            throw new IOException(new Exception(\"file format error\"));\r\n        }\r\n        if (r < n) {\r\n            throw new IOException(new Exception(\"file format error\"));\r\n        }\r\n        return r;\r\n    }\r\n\r\n\r\n    /**\r\n     * 4Byte(int) 읽기\r\n     * @return\r\n     */\r\n    protected int readInt() {\r\n        return (((((readByte() << 8) | readByte()) << 8) | readByte()) << 8) | readByte();\r\n    }\r\n\r\n    /**\r\n     * 2Byte(short) 읽기\r\n     * @return\r\n     */\r\n    protected short readShort() {\r\n        return (short) ((readByte() << 8) | readByte());\r\n    }\r\n\r\n    /**\r\n     * 문자열 읽기\r\n     * @return\r\n     */\r\n    protected String readString(int len) {\r\n        String rString = \"\";\r\n        for (int i = 0; i < len; i++) {\r\n            rString = rString + (char) readByte();\r\n        }\r\n        return rString;\r\n    }\r\n    /**\r\n     * utf 16 디코딩\r\n     * @return\r\n     */\r\n    protected String readUtf16(int len) {\r\n        ArrayList<Byte> rBytes = new ArrayList<>();\r\n        try {\r\n            boolean first = true;\r\n            Byte[] inputB = new Byte[2];\r\n            for(int i = 0; i < len; i++) {\r\n                inputB[first ? 0 : 1] = (byte) input.read();\r\n\r\n                if(! first) {  // && ! (inputB[0] == 0 && inputB[1] == 0)\r\n                    rBytes.add(inputB[0]);\r\n                    rBytes.add(inputB[1]);\r\n                }\r\n\r\n                first = ! first;\r\n            }\r\n\r\n        } catch (IOException e) {\r\n\r\n        }\r\n        byte[] byteArray = new byte[rBytes.size()];\r\n        for(int i = 0; i < rBytes.size(); i++) {\r\n            byteArray[i] = rBytes.get(i);\r\n        }\r\n\r\n        return new String(byteArray, 0, byteArray.length, StandardCharsets.UTF_16);\r\n    }\r\n    /**\r\n     * 배열 헤드 넘기기\r\n     */\r\n    protected void jumpBytes(int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            readByte();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 색상 모드 가져오기\r\n     */\r\n    protected String getColorMode(int n) {\r\n        switch (n) {\r\n            case 0:\r\n                return \"Bitmap\";\r\n            case 1:\r\n                return \"GrayScale\";\r\n            case 2:\r\n                return \"Indexed\";\r\n            case 3:\r\n                return \"RGB\";\r\n            case 4:\r\n                return \"CMYK\";\r\n            case 7:\r\n                return \"MultiChannel\";\r\n            case 8:\r\n                return \"Duotone\";\r\n            case 9:\r\n                return \"Lab\";\r\n            default:\r\n                throw new RuntimeException(\"colorMode is not support\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 재설정\r\n     */\r\n    protected void init() throws IOException {\r\n        input.close();\r\n        inputLen = input.available();\r\n        psdHeader = null;\r\n        psdLayers = null;\r\n    }\r\n    protected int getStreamOffset() throws IOException {\r\n        return inputLen - input.available();\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        String layer = \"\";\r\n        for(int i = 0; i < layerCount; i++) {\r\n            layer += psdLayers[i].toString() + \"\\n\";\r\n        }\r\n        return psdHeader.toString() + \"\\n\" + layer;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/psd/manipulator/PsdReader.java b/src/main/java/psd/manipulator/PsdReader.java
--- a/src/main/java/psd/manipulator/PsdReader.java	(revision ab5a7416aa1d58207af9f17fea180caca712cc41)
+++ b/src/main/java/psd/manipulator/PsdReader.java	(date 1695347116206)
@@ -4,7 +4,6 @@
 import psd.PsdEntity;
 import psd.component.PsdHeader;
 import psd.component.PsdLayer;
-import psd.component.PsdSectionDataInfo;
 
 import java.awt.image.BufferedImage;
 import java.awt.image.DataBufferInt;
@@ -21,12 +20,10 @@
     protected int iLine;
     protected String encoding;
     protected int layerMaskInfoLen;
-    protected PsdSectionDataInfo dataInfo;
 
     public PsdReader() {
         psdHeader = new PsdHeader();
         psdLayers = null;
-        dataInfo = new PsdSectionDataInfo();
     }
 
     /**
@@ -56,8 +53,9 @@
     }
 
     public void readHeader() throws IOException {
-        if (! readString(4).equals("8BPS")) {
-            throw new RuntimeException("Signature not match");
+        String sign = readString(4);
+        if (! sign.equals("8BPS")) {
+            throw new RuntimeException("Signature not match + " + sign.getBytes()[0]);
         }
 
         psdHeader.setVersion(readShort());
@@ -67,29 +65,20 @@
         psdHeader.setWidth(readInt());
         psdHeader.setChannelBitsDepth(readShort());
         psdHeader.setColorMode(getColorMode(readShort()));
-        dataInfo.setP_colorMod(getStreamOffset());
-        dataInfo.setL_colorMod(readInt());
-        jumpBytes(dataInfo.getL_colorMod());
-        dataInfo.setP_imageResource(getStreamOffset());
-        dataInfo.setL_imageResource(readInt());
-        jumpBytes(dataInfo.getL_imageResource());
+        jumpBytes(readInt());
+        jumpBytes(readInt());
     }
 
     public void readLayers() throws IOException {
-        dataInfo.setP_layerMaskInfo(getStreamOffset());
-        dataInfo.setL_layerMaskInfo(readInt());
-        layerMaskInfoLen = getStreamOffset() + dataInfo.getL_layerMaskInfo();
-        if(dataInfo.getL_layerMaskInfo() < 0) return;
-        dataInfo.setL_layerInfo(readInt());
+        layerMaskInfoLen = getStreamOffset() + readInt();
+        if(layerMaskInfoLen < 0) return;
         layerCount = readShort();
-        int[] L_layerRecord = new int[layerCount];
-        int[] P_layerRecord = new int[layerCount];
 
         if(layerCount > 0) {
             psdLayers = new PsdLayer[layerCount];
         }
+        int iNoneLayer = 0;
         for(int iLayerCount = 0; iLayerCount < layerCount; iLayerCount++) {
-            P_layerRecord[iLayerCount] = getStreamOffset();
             PsdLayer layer = new PsdLayer();
             layer.setTop(readInt());
             layer.setLeft(readInt());
@@ -124,8 +113,14 @@
             int layerBlendingRangesLen = readInt();
             jumpBytes(layerBlendingRangesLen);
             int nameLen = readByte();
-            if((nameLen + 1) % 4 > 0) nameLen += 4 - (nameLen + 1) % 4;
-            jumpBytes(nameLen);
+
+            layer.setName(readString(nameLen));
+            if ((nameLen + 1) % 4 > 0) {
+                jumpBytes(4 - (nameLen + 1) % 4);
+            }
+
+            System.out.println(layer.getName());
+            if(layer.getName().equals("</Layer set>")) System.out.println("folder start!");
 
             while (getStreamOffset() < dataFieldLen) {
                 String sign = readString(4);
@@ -134,12 +129,8 @@
                 }
                 layer = readMoreLayerInfo(layer, readString(4), readInt());
             }
-
-            L_layerRecord[iLayerCount] = getStreamOffset() - P_layerRecord[iLayerCount];
             psdLayers[iLayerCount] = layer;
         }
-        dataInfo.setP_layerRecord(P_layerRecord);
-        dataInfo.setL_layerRecord(L_layerRecord);
     }
 
     protected PsdLayer readMoreLayerInfo(PsdLayer layer, String key, int len) {
@@ -180,9 +171,13 @@
         layer.setChannelId(channelID);
     }
     public void readLayersImage() throws IOException {
-        dataInfo.setP_channelImageData(getStreamOffset());
         for(int iLayerCount = 0; iLayerCount < layerCount; iLayerCount++) {
             PsdLayer layer = psdLayers[iLayerCount];
+
+            if(layer.getWidth() == 0 || layer.getHeight() == 0) {
+                continue;
+            }
+
             byte[] r = null, g = null, b = null, a = null;
             for(int iChannelCount = 0; iChannelCount < layer.getChannelCount(); iChannelCount++) {
                 int id = layer.getChannelId()[iChannelCount];
@@ -213,7 +208,6 @@
     }
 
     protected void readPreview() throws IOException {
-        dataInfo.setP_preview(getStreamOffset());
         short encoding = readShort();
         if(encoding == 0) this.encoding = "raw";
         else if(encoding == 1) this.encoding = "rle";
Index: src/main/java/psd/manipulator/PsdEditor.java
===================================================================
diff --git a/src/main/java/psd/manipulator/PsdEditor.java b/src/main/java/psd/manipulator/PsdEditor.java
deleted file mode 100644
--- a/src/main/java/psd/manipulator/PsdEditor.java	(revision ab5a7416aa1d58207af9f17fea180caca712cc41)
+++ /dev/null	(revision ab5a7416aa1d58207af9f17fea180caca712cc41)
@@ -1,48 +0,0 @@
-package psd.manipulator;
-
-import psd.component.PsdLayer;
-import psd.manipulator.PsdReader;
-
-import java.io.BufferedOutputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-
-public class PsdEditor extends PsdReader {
-    public void addLayer(PsdLayer layer) throws IOException {
-        ByteArrayOutputStream info = new ByteArrayOutputStream();
-        info.write(layer.getTop());
-        info.write(layer.getLeft());
-        info.write(layer.getBottom());
-        info.write(layer.getRight());
-        info.write((short) layer.getChannelCount());
-        for(int i = 0; i < layer.getChannelCount(); i++) {
-            info.write((short) layer.getChannelId()[i]);
-            info.write(layer.getChannelSize()[i]);
-        }
-        info.write("8BIM".getBytes());
-        info.write(layer.getModeKey().getBytes());
-        info.write((byte) layer.getTransparency());
-        info.write(layer.getClipping() == 'Y' ? (byte)1:(byte)0);
-        byte flag = 0;
-        if(layer.getProtectTransparency() == 'Y') flag |= 0x01;
-        if(layer.getVision() == 'Y') flag |= 0x02;
-        info.write(flag);
-        info.write((byte) 0);
-        info.write(8);
-        info.write(0);
-        info.write(0);
-        byte[] nameBytes = layer.getName().getBytes();
-        int padding = 4 - (nameBytes.length % 4);
-        byte[] paddingName = new byte[nameBytes.length + padding];
-        System.arraycopy(nameBytes, 0, paddingName, 0, nameBytes.length);
-        info.write(paddingName);
-
-        byte[] export = info.toByteArray();
-        String print = "";
-        for (byte b : export) {
-            print += (char) b;
-        }
-
-        System.out.println(print);
-    }
-}
Index: src/main/java/psd/component/PsdSectionDataInfo.java
===================================================================
diff --git a/src/main/java/psd/component/PsdSectionDataInfo.java b/src/main/java/psd/component/PsdSectionDataInfo.java
deleted file mode 100644
--- a/src/main/java/psd/component/PsdSectionDataInfo.java	(revision ab5a7416aa1d58207af9f17fea180caca712cc41)
+++ /dev/null	(revision ab5a7416aa1d58207af9f17fea180caca712cc41)
@@ -1,18 +0,0 @@
-package psd.component;
-
-import lombok.Data;
-
-@Data
-public class PsdSectionDataInfo {
-    private int P_colorMod;
-    private int L_colorMod;
-    private int P_imageResource;
-    private int L_imageResource;
-    private int P_layerMaskInfo;
-    private int L_layerMaskInfo;
-    private int L_layerInfo;
-    private int[] P_layerRecord;
-    private int[] L_layerRecord;
-    private int P_channelImageData;
-    private int P_preview;
-}
\ No newline at end of file
